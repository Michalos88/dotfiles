# create a new directory and enter it
function cdmkdir () { mkdir -p "$@" && cd "$@" }

# move file/directory to the trash
function trash () {
  local trash_dir="${HOME}/.Trash"
  local temp_ifs=$IFS
  IFS=$'\n'
  for item in "$@"
  do
    if [[ -e "$item" ]]
    then
      item_name="$(basename $item)"
      if [[ -e "${trash_dir}/${item_name}" ]]
      then
        mv -f "$item" "${trash_dir}/${item_name} $(date "+%H-%M-%S")"
      else
        mv -f "$item" "${trash_dir}/"
      fi
    fi
  done
  IFS=$temp_ifs
}

# git functions
function get_git_branch () {
  echo `git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
}

# py instead python
function py() {
    local python_cmd

    # Check for python3 command availability
    if command -v python3 &>/dev/null; then
        python_cmd="python3"
    elif command -v python &>/dev/null; then
        python_cmd="python"
    else
        echo "Error: Python is not installed"
        return 1
    fi

    if [ $# -eq 1 ]; then
        if [ -f "$1" ]; then
            $python_cmd "$1"
        else
            echo "Error: File '$1' not found"
            return 1
        fi
    else
        $python_cmd
    fi
}

# shortcuts for jupyter notebook
function jnb() {
    local usage="Usage: jnb [add|rm kernel_name]"

    if [ $# -eq 0 ]; then
        jupyter notebook
        return
    elif [ "$1" = "add" ]; then
        if [ $# -ne 2 ]; then
            echo "$usage"
            return 1
        fi
        python3 -m ipykernel install --user --name="$2" || echo "Failed to add kernel: $2"
    elif [ "$1" = "rm" ]; then
        if [ $# -ne 2 ]; then
            echo "$usage"
            return 1
        fi
        jupyter kernelspec uninstall "$2" || echo "Failed to remove kernel: $2"
    else
        echo "$usage"
        return 1
    fi
}

# shortcut for code directory
function c () { cd ~/code/$1 }
function _c () { _files -W ~/code -/ }
compdef _c c
